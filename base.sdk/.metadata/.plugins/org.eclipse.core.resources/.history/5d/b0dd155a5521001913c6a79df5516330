/*
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 *
 *  1.  Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *
 *  2.  Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *
 *  3.  Neither the name of the copyright holder nor the names of its
 *      contributors may be used to endorse or promote products derived from
 *      this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 *  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 *  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 *  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 *  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 *  OR BUSINESS INTERRUPTION). HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 *  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *****************************************************************************/
/******************************************************************************
 *
 *
 * @file arduino_getsture.c
 *
 * IOP code (MicroBlaze) for DFRotbot Gesture module.
 * The module has to be connected to an arduino interface
 * via a shield socket.
 *
 * <pre>
 * MODIFICATION HISTORY:
 *
 * Ver   Who    Date     Changes
 * ----- ---    ------- -----------------------------------------------
 * 1.00a zc/ljh 01/22/19 release
 *
 * </pre>
 *
 *****************************************************************************/

#include "4WD_MOTO.h"
#include <circular_buffer.h>
#include "sleep.h"

// Work on 8-bit mode
#define CONFIG_IOP_SWITCH           0x1
#define STOP                        0x3
#define MOVE                        0x5
#define VELOCITY                    0x7

extern unsigned int PWM_A_PIN, PWM_B_PIN, PWM_C_PIN, PWM_D_PIN;
extern unsigned int DIR_A_PIN, DIR_B_PIN, DIR_C_PIN, DIR_D_PIN;
extern unsigned int FG_A_PIN, FG_B_PIN, FG_C_PIN, FG_D_PIN;

int main()
{
	int cmd;
	u16 get_bits;
	u16 data;

	while(1){
		// wait and store valid command
		while((MAILBOX_CMD_ADDR & 0x01)==0);
		cmd = MAILBOX_CMD_ADDR;

		switch(cmd){
			  case CONFIG_IOP_SWITCH:
				  // read new pin configuration
				  gpio_data = gpio_open(MAILBOX_DATA(0));
				  gpio_clk = gpio_open(MAILBOX_DATA(0) + 1);
				  ledbar_init();
				  MAILBOX_CMD_ADDR = 0x0;
				  break;

			  case RESET:
				  set_bits(0x0000);
				  level_holder = 0;
				  prev_inverse = 0;
				  MAILBOX_CMD_ADDR = 0x0;
				  break;

			  case WRITE_LEDS:
				  data = (u16) MAILBOX_DATA(0);
				  set_bits(data);
				  MAILBOX_CMD_ADDR = 0x0;
				  break;

			  case SET_BRIGHTNESS:
				  data = (u16) MAILBOX_DATA(0);
				  set_brightness[9] = MAILBOX_DATA(1);
				  set_brightness[8] = MAILBOX_DATA(2);
				  set_brightness[7] = MAILBOX_DATA(3);
				  set_brightness[6] = MAILBOX_DATA(4);
				  set_brightness[5] = MAILBOX_DATA(5);
				  set_brightness[4] = MAILBOX_DATA(6);
				  set_brightness[3] = MAILBOX_DATA(7);
				  set_brightness[2] = MAILBOX_DATA(8);
				  set_brightness[1] = MAILBOX_DATA(9);
				  set_brightness[0] = MAILBOX_DATA(10);
				  set_led_brightness(data, set_brightness);
				  MAILBOX_CMD_ADDR = 0x0;
				  break;

			  case SET_LEVEL:
				  level = (int) MAILBOX_DATA(0);
				  brightness = (u8) MAILBOX_DATA(1);
				  red_to_green = (int) MAILBOX_DATA(2);
				  set_level(level,brightness,red_to_green);
				  MAILBOX_CMD_ADDR = 0x0;
				  break;

		   case READ_LEDS:
				  get_bits = ledbar_read();
				  MAILBOX_DATA(0) = (unsigned)get_bits;
				  MAILBOX_CMD_ADDR = 0x0;
				  break;

			  default:
				  MAILBOX_CMD_ADDR = 0x0; // reset command
				  break;
		   }
		 }
   return(0);
}

//int main()
//{
//	float dist;
//	init_ardumoto();
//	dist = get_velocity();
//	run_all();
//	sleep(1);
//	stop_all();
//	sleep(1);
//	dist = get_velocity();
//	move_forward(50);
//	sleep(1);
//	move_backward(50);
//	sleep(1);
//	move_left(STATUS_A);
//	sleep(1);
//	move_right(STATUS_B);
//	sleep(1);
//	stop_all();
//	return 0;
//}
