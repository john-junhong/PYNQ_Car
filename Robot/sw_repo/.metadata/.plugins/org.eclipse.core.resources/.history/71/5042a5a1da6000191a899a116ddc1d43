#include "I2CMultiplexer.h"


I2CMultiplexer::I2CMultiplexer(uint8_t addr){
	I2CMulti = addr;
}

uint8_t *I2CMultiplexer::scan(uint8_t port){
	static uint8_t dev[127] = {0};
//	uint8_t dev;
	memset(dev,0,sizeof(dev));
	uint8_t i = 0;
	selectPort(port);

	byte error, address;
	int nDevices;
	nDevices = 0;
	for(address = 1; address < 127; address++ ) {
		if (address == I2CMultiplexer){ continue;}
		Wire.beginTransmission(address);
		error = Wire.endTransmission();
		if (error == 0){
			dev[i] = address;
			i++;
		}
	}
	return dev;
}

void I2CMultiplexer::selectPort(uint8_t port){
	if (port > 7) return;
	Wire.beginTransmission(I2CMultiplexer);
	Wire.write(1 << port);
	Wire.endTransmission();
}

uint8_t I2CMultiplexer::write(uint8_t port,uint8_t addr, uint8_t reg,uint8_t* buf, uint8_t len){
	selectPort(port);

	Wire.beginTransmission(addr); // transmit to device #8
	Wire.write(reg);							// sends one byte
	uint8_t i = 0;
	for(i = 0; i < len; i++){
		Wire.write(*buf);
		buf++;
	}
	Wire.endTransmission();		// stop transmitting
}


uint8_t I2CMultiplexer::read(uint8_t port,uint8_t addr,uint8_t reg,uint8_t* data, uint8_t len){
	selectPort(port);
	int i = 0;
	if (i2c_write(I2CMulti_device, addr, &reg, 1)==0)
		return;
	 i = i2c_read(I2CMulti_device, addr, data, len);
//	Serial.println(result[0]);
	return i;
}

void BNO055_IIC::readReg(uint8_t reg, uint8_t *pBuf, uint8_t len){
	lastOperateStatus = eStatusErrDeviceNotDetect;
	if (i2c_write(I2CMulti_device, addr, &reg, 1)==0)
		return;
		i2c_read(I2CMulti_device, addr, pBuf, len);
		lastOperateStatus = eStatusOK;
}
